package com.handu.poweroperational.main.activity.map;import android.Manifest;import android.app.Activity;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.graphics.Point;import android.location.LocationManager;import android.net.ConnectivityManager;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.NonNull;import android.support.v7.widget.Toolbar;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.View;import android.widget.ArrayAdapter;import android.widget.AutoCompleteTextView;import android.widget.ImageButton;import android.widget.LinearLayout;import android.widget.TextView;import com.baidu.location.BDLocation;import com.baidu.location.BDLocationListener;import com.baidu.location.LocationClient;import com.baidu.mapapi.map.BaiduMap;import com.baidu.mapapi.map.BitmapDescriptor;import com.baidu.mapapi.map.LogoPosition;import com.baidu.mapapi.map.MapPoi;import com.baidu.mapapi.map.MapStatus;import com.baidu.mapapi.map.MapStatusUpdateFactory;import com.baidu.mapapi.map.MapView;import com.baidu.mapapi.map.MyLocationConfiguration;import com.baidu.mapapi.map.MyLocationData;import com.baidu.mapapi.model.LatLng;import com.baidu.mapapi.search.core.PoiInfo;import com.baidu.mapapi.search.core.SearchResult;import com.baidu.mapapi.search.poi.OnGetPoiSearchResultListener;import com.baidu.mapapi.search.poi.PoiCitySearchOption;import com.baidu.mapapi.search.poi.PoiDetailResult;import com.baidu.mapapi.search.poi.PoiDetailSearchOption;import com.baidu.mapapi.search.poi.PoiIndoorResult;import com.baidu.mapapi.search.poi.PoiResult;import com.baidu.mapapi.search.poi.PoiSearch;import com.baidu.mapapi.search.sug.OnGetSuggestionResultListener;import com.baidu.mapapi.search.sug.SuggestionResult;import com.baidu.mapapi.search.sug.SuggestionSearch;import com.baidu.mapapi.search.sug.SuggestionSearchOption;import com.handu.poweroperational.R;import com.handu.poweroperational.base.BaseActivity;import com.handu.poweroperational.main.application.PowerOperationalApplicationLike;import com.handu.poweroperational.utils.AppLogger;import com.handu.poweroperational.utils.Tools;import com.handu.poweroperational.utils.baidu_map.overlayutil.PoiOverlay;import com.yanzhenjie.permission.AndPermission;import com.yanzhenjie.permission.PermissionListener;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.List;import butterknife.Bind;import butterknife.ButterKnife;import butterknife.OnClick;import static android.app.ProgressDialog.STYLE_SPINNER;public class MapActivity extends BaseActivity implements        OnGetPoiSearchResultListener, OnGetSuggestionResultListener {    public static final String SEARCH_CONTENT = "content";    private static final int REQUEST_LOCATION_PERMISSION = 2;    private ProgressDialog dialog;    @Bind(R.id.toolbar)    Toolbar toolbar;    @Bind(R.id.mapView)    MapView mMapView;    @Bind(R.id.bt_map_type)    ImageButton btMapType;    @Bind(R.id.ac_tv_search)    AutoCompleteTextView etSearch;    @Bind(R.id.ibt_search)    ImageButton ibtSearch;    @Bind(R.id.tv_location)    TextView tvLocation;    @Bind(R.id.ll_location)    LinearLayout llLocation;    private PoiSearch mPoiSearch = null;    private SuggestionSearch mSuggestionSearch = null;    private ArrayAdapter<String> sugAdapter = null;    private String currentCity = "";    private BaiduMap mBaiduMap = null;    //当前位置坐标    private LatLng startLatLng;    //目标地位置坐标    private LatLng endLatLng;    // 定位相关    private LocationClient mLocClient;    private MyLocationConfiguration.LocationMode mCurrentMode;    private BitmapDescriptor mCurrentMarker;    private static final int accuracyCircleFillColor = 0xAAFFFF88;    private static final int accuracyCircleStrokeColor = 0xAA00FF00;    boolean isFirstLoc = true; // 是否首次定位    private MsgHandler handler = new MsgHandler(this);    private GpsStatusReceiver gpsStatusReceiver;    private NetworkChangeReceive networkChangeReceive;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_map);        ButterKnife.bind(this);        registerReceiver();        initView();        initData();    }    @Override    protected void onResume() {        super.onResume();        //在activity执行onResume时执行mapView. onResume ()，实现地图生命周期管理        mMapView.onResume();    }    @Override    protected void onPause() {        super.onPause();        //在activity执行onPause时执行mapView. onPause ()，实现地图生命周期管理        mMapView.onPause();    }    @Override    protected void onDestroy() {        handler.removeCallbacksAndMessages(null);        if (mPoiSearch != null)            mPoiSearch.destroy();        if (mSuggestionSearch != null)            mSuggestionSearch.destroy();        // 退出时销毁定位        if (mLocClient != null)            mLocClient.stop();        // 关闭定位图层        if (mBaiduMap != null)            mBaiduMap.setMyLocationEnabled(false);        //在activity执行onDestroy时执行mapView.onDestroy()，实现地图生命周期管理        if (mMapView != null) {            mMapView.onDestroy();            mMapView = null;        }        unregisterReceiver(networkChangeReceive);        unregisterReceiver(gpsStatusReceiver);        super.onDestroy();    }    //注册Gps,网络变化Receiver    private void registerReceiver() {        IntentFilter filter = new IntentFilter();        filter.addAction(LocationManager.PROVIDERS_CHANGED_ACTION);        gpsStatusReceiver = new GpsStatusReceiver();        registerReceiver(gpsStatusReceiver, filter);        filter = new IntentFilter();        filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);        networkChangeReceive = new NetworkChangeReceive();        registerReceiver(networkChangeReceive, filter);    }    @Override    protected void initView() {        dialog = new ProgressDialog(this);        dialog.setCanceledOnTouchOutside(false);        dialog.setProgressStyle(STYLE_SPINNER);        dialog.setMessage("正在搜索中...");        mCurrentMarker = null;        initToolBar(toolbar, getString(R.string.title_location_info), true, v -> finish());    }    @Override    protected void initData() {        String searchContent = getIntent().getStringExtra(SEARCH_CONTENT);        if (!TextUtils.isEmpty(searchContent))            etSearch.setText(searchContent);        requestLocationPermission();    }    //初始化位置相关    private void init() {        if (!Tools.isLocationInfoOpen(mContext)) {            Tools.toastError(getString(R.string.location_info_is_close_please_open_location_info));            return;        }        //启动位置服务        initMapView();        initMap();        initMapListener();        initPoiSearch();    }    private void initPoiSearch() {        // 初始化搜索模块，注册搜索事件监听        mPoiSearch = PoiSearch.newInstance();        mPoiSearch.setOnGetPoiSearchResultListener(this);        // 初始化建议搜索模块，注册建议搜索事件监听        mSuggestionSearch = SuggestionSearch.newInstance();        mSuggestionSearch.setOnGetSuggestionResultListener(this);        sugAdapter = new ArrayAdapter<>(this,                android.R.layout.simple_dropdown_item_1line);        etSearch.setAdapter(sugAdapter);        etSearch.setThreshold(1);        /**         * 当输入关键字变化时，动态更新建议列表         */        etSearch.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (s.length() <= 0) {                    return;                }                /**                 * 使用建议搜索服务获取建议列表，结果在onSuggestionResult()中更新                 */                if (currentCity != null)                    mSuggestionSearch.requestSuggestion((new SuggestionSearchOption()).keyword(s.toString()).city(currentCity));            }        });    }    private void initMapView() {        mMapView.setLogoPosition(LogoPosition.logoPostionleftBottom);    }    private void initMapListener() {        mBaiduMap.setOnMapTouchListener(motionEvent -> {            btMapType.setImageResource(R.drawable.ic_vector_go_current_location);            mCurrentMode = MyLocationConfiguration.LocationMode.NORMAL;            mBaiduMap.setMyLocationConfigeration(new MyLocationConfiguration(                    mCurrentMode, true, mCurrentMarker));        });        mBaiduMap.setOnMapClickListener(new BaiduMap.OnMapClickListener() {            @Override            public void onMapClick(LatLng latLng) {            }            @Override            public boolean onMapPoiClick(MapPoi mapPoi) {                return false;            }        });    }    private void initMap() {        // 地图初始化        mBaiduMap = mMapView.getMap();        mBaiduMap.setCompassPosition(new Point(70, 380));        mBaiduMap.setIndoorEnable(true);        //普通地图        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);        mCurrentMode = MyLocationConfiguration.LocationMode.FOLLOWING;        mBaiduMap.setMyLocationConfigeration(new MyLocationConfiguration(                mCurrentMode, true, mCurrentMarker,                accuracyCircleFillColor, accuracyCircleStrokeColor));        // 开启定位图层        mBaiduMap.setMyLocationEnabled(true);        // 定位初始化        mLocClient = new LocationClient(this);        mLocClient.registerLocationListener(mListener);        mLocClient.setLocOption(PowerOperationalApplicationLike.getInstance().locationService.getDefaultLocationClientOption());        mLocClient.start();    }    /**     * 申请定位相关权限     */    private void requestLocationPermission() {        //位置信息权限        AndPermission.with(this)                .requestCode(REQUEST_LOCATION_PERMISSION)                .permission(                        Manifest.permission.ACCESS_FINE_LOCATION,                        Manifest.permission.ACCESS_COARSE_LOCATION                ).send();    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        AndPermission.onRequestPermissionsResult(this, requestCode, permissions, grantResults, new PermissionListener() {            @Override            public void onSucceed(int requestCode) {                if (requestCode == REQUEST_LOCATION_PERMISSION) {                    init();                }            }            @Override            public void onFailed(int requestCode) {                if (requestCode == REQUEST_LOCATION_PERMISSION) {                    showSnackbar(toolbar, "位置权限申请被禁止，定位功能未启动!", "关闭", v -> {                    }, false);                }            }        });    }    /**     * 附近搜索     */    public void searchInCity() {        if (!Tools.isNetworkAvailable()) return;        if (!Tools.isLocationInfoOpen(getApplicationContext())) {            Tools.toastError(getString(R.string.location_info_is_close_please_open_location_info));            return;        }        if (TextUtils.isEmpty(etSearch.getText().toString())) {            Tools.toastError(getString(R.string.search_content_is_null));            return;        }        if (currentCity == null) {            Tools.toastInfo(getString(R.string.is_location_please_wait));            return;        }        dialog.show();        PoiCitySearchOption option = new PoiCitySearchOption()                .city(currentCity)                .keyword(etSearch.getText().toString())                .pageNum(0)                .pageCapacity(20);        mPoiSearch.searchInCity(option);    }    @Override    public void onGetPoiResult(PoiResult poiResult) {        dialog.dismiss();        if (poiResult == null || poiResult.error == SearchResult.ERRORNO.RESULT_NOT_FOUND) {            Tools.toastInfo(getString(R.string.query_data_is_null));            return;        }        if (poiResult.error == SearchResult.ERRORNO.NO_ERROR) {            if (mBaiduMap != null) {                mBaiduMap.clear();                PoiOverlay overlay = new MyPoiOverlay(mBaiduMap);                mBaiduMap.setOnMarkerClickListener(overlay);                overlay.setData(poiResult);                overlay.addToMap();                overlay.zoomToSpan();            }        }        List<PoiInfo> list = poiResult.getAllPoi();        if (list != null && list.size() > 0) {            String name = list.get(0).name;            String address = list.get(0).address;            tvLocation.setText("1." + name + "\n" + address);            llLocation.setVisibility(View.VISIBLE);            endLatLng = list.get(0).location;        }    }    private class MyPoiOverlay extends PoiOverlay {        MyPoiOverlay(BaiduMap baiduMap) {            super(baiduMap);        }        @Override        public boolean onPoiClick(int index) {            super.onPoiClick(index);            PoiInfo poi = getPoiResult().getAllPoi().get(index);            mPoiSearch.searchPoiDetail((new PoiDetailSearchOption())                    .poiUid(poi.uid));            return true;        }    }    @Override    public void onGetPoiDetailResult(PoiDetailResult poiDetailResult) {        if (poiDetailResult.error != SearchResult.ERRORNO.NO_ERROR) {            Tools.toastNormal(getString(R.string.query_data_is_null));        } else {            String name = poiDetailResult.getName();            String address = poiDetailResult.getAddress();            tvLocation.setText(name + "\n" + address);            endLatLng = poiDetailResult.location;        }    }    @Override    public void onGetPoiIndoorResult(PoiIndoorResult poiIndoorResult) {    }    @Override    public void onGetSuggestionResult(SuggestionResult suggestionResult) {        if (suggestionResult == null || suggestionResult.getAllSuggestions() == null) {            return;        }        List<String> suggest = new ArrayList<>();        for (SuggestionResult.SuggestionInfo info : suggestionResult.getAllSuggestions()) {            if (info.key != null) {                suggest.add(info.key);            }        }        sugAdapter = new ArrayAdapter<>(this, android.R.layout.simple_dropdown_item_1line, suggest);        etSearch.setAdapter(sugAdapter);        sugAdapter.notifyDataSetChanged();    }    private BDLocationListener mListener = new BDLocationListener() {        @Override        public void onReceiveLocation(BDLocation location) {            // map view 销毁后不在处理新接收的位置            if (location == null || mMapView == null) {                return;            }            Message message = new Message();            message.obj = location;            message.what = 1;            handler.sendMessage(message);        }        @Override        public void onConnectHotSpotMessage(String s, int i) {        }    };    @OnClick({R.id.bt_map_type, R.id.ibt_search, R.id.bt_route_plan})    public void onClick(View view) {        switch (view.getId()) {            case R.id.bt_map_type:                btMapType.setImageResource(R.drawable.ic_vector_current_location);                switch (mCurrentMode) {                    case NORMAL:                        mCurrentMode = MyLocationConfiguration.LocationMode.FOLLOWING;                        mBaiduMap.setMyLocationConfigeration(new MyLocationConfiguration(                                mCurrentMode, true, mCurrentMarker));                        break;                    case FOLLOWING:                        mCurrentMode = MyLocationConfiguration.LocationMode.FOLLOWING;                        mBaiduMap.setMyLocationConfigeration(new MyLocationConfiguration(                                mCurrentMode, true, mCurrentMarker));                        break;                    default:                        break;                }                break;            case R.id.ibt_search:                searchInCity();                break;            case R.id.bt_route_plan:                Bundle bundle = new Bundle();                bundle.putParcelable(RoutePlanActivity.START_PLACE, startLatLng);                bundle.putParcelable(RoutePlanActivity.END_PLACE, endLatLng);                bundle.putString(RoutePlanActivity.CITY, currentCity);                gotoActivity(RoutePlanActivity.class, bundle, false);                break;        }    }    static class MsgHandler extends Handler {        private WeakReference<Activity> reference;        public MsgHandler(Activity activity) {            reference = new WeakReference<>(activity);        }        @Override        public void handleMessage(Message msg) {            MapActivity activity = (MapActivity) reference.get();            BDLocation location = (BDLocation) msg.obj;            activity.currentCity = location.getCity();            LatLng ll = new LatLng(location.getLatitude(), location.getLongitude());            activity.startLatLng = ll;            if (activity.isFirstLoc) {                activity.isFirstLoc = false;                MyLocationData locData = new MyLocationData.Builder()                        .accuracy(location.getRadius())                        // 此处设置开发者获取到的方向信息，顺时针0-360                        .direction(100)                        .latitude(location.getLatitude())                        .longitude(location.getLongitude())                        .build();                activity.mBaiduMap.setMyLocationData(locData);                MapStatus.Builder builder = new MapStatus.Builder();                builder.target(ll).zoom(18.0f);                activity.mBaiduMap.animateMapStatus(MapStatusUpdateFactory.newMapStatus(builder.build()));                activity.searchInCity();            }            super.handleMessage(msg);        }    }    /**     * 监听GPS状态变化广播     */    class GpsStatusReceiver extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (action.equals(LocationManager.PROVIDERS_CHANGED_ACTION)) {                if (Tools.isGPSOpen(mContext)) {                    AppLogger.e("位置信息已打开");                    init();                } else {                    AppLogger.e("位置信息已关闭");                }            }        }    }    /**     * 监听网络状态变化广播     */    class NetworkChangeReceive extends BroadcastReceiver {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            if (action.equals(ConnectivityManager.CONNECTIVITY_ACTION)) {                if (Tools.isNetworkAvailable()) {                    AppLogger.e("网络已连接");                    init();                } else {                    AppLogger.e("网络已断开");                }            }        }    }}