package com.handu.poweroperational.main.activity;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.TextInputEditText;import android.support.v4.view.ViewPropertyAnimatorListener;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.StaggeredGridLayoutManager;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.view.View;import android.view.ViewGroup;import android.view.animation.OvershootInterpolator;import android.widget.TextView;import com.chanven.lib.cptr.recyclerview.RecyclerAdapterWithHF;import com.flyco.dialog.widget.MaterialDialog;import com.handu.poweroperational.R;import com.handu.poweroperational.base.BaseActivity;import com.handu.poweroperational.db.dao.CommonBuildingAndDADao;import com.handu.poweroperational.db.entity.CommonBuildingAndDA;import com.handu.poweroperational.db.manager.GreenDaoManager;import com.handu.poweroperational.main.activity.operation.OperationActivity;import com.handu.poweroperational.main.bean.results.DeviceResult;import com.handu.poweroperational.ui.RecyclerView.adapter.CommonRecyclerViewAdapter;import com.handu.poweroperational.ui.RecyclerView.click.ItemClickListener;import com.handu.poweroperational.ui.RecyclerView.holder.BaseRecyclerViewHolder;import com.handu.poweroperational.utils.AnimationUtil;import com.handu.poweroperational.utils.DensityUtils;import com.handu.poweroperational.utils.Tools;import java.util.ArrayList;import java.util.List;import butterknife.Bind;import butterknife.ButterKnife;import butterknife.OnClick;import ezy.ui.layout.LoadingLayout;import jp.wasabeef.recyclerview.adapters.ScaleInAnimationAdapter;@SuppressWarnings("ResourceType")public class BuildingAndDaActivity extends BaseActivity {    public static final int REQUEST_CODE = 100;    public static final String REQUEST_ACTION = "forResult";    public static final String REQUEST_RESULT = "Result";    //默认查询本地数据库常用台区或楼宇    private int queryType = 0;    @Bind(R.id.loading_view)    LoadingLayout loadingView;    @Bind(R.id.toolbar)    Toolbar toolbar;    @Bind(R.id.recyclerView)    RecyclerView recyclerView;    @Bind(R.id.fab_go_top)    FloatingActionButton fabGoTop;    @Bind(R.id.et_search_content)    TextInputEditText etSearchContent;    private ArrayList<DeviceResult> items;    private CommonRecyclerViewAdapter<DeviceResult> mAdapter;    private Handler handler = new Handler();    private String searchText = "";    private String action = null;    private StaggeredGridLayoutManager manager;    private CommonBuildingAndDADao dao;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_building_and_da);        ButterKnife.bind(this);        dao = GreenDaoManager.getInstance().getNewSession().getCommonBuildingAndDADao();        initView();        initData();    }    @Override    protected void onDestroy() {        handler.removeCallbacksAndMessages(null);        super.onDestroy();    }    @Override    protected void initView() {        action = this.getIntent().getAction();        initToolBar(toolbar, getString(R.string.da_or_building_search), true, v -> finish());        initLoadingView();        initRecyclerView();    }    private void initRecyclerView() {        recyclerView.addOnItemTouchListener(new ItemClickListener(recyclerView,                new ItemClickListener.OnItemClickListener() {                    @Override                    public void onItemClick(View view, int position) {                        DeviceResult result = mAdapter.getItem(position);                        List<CommonBuildingAndDA> list = dao.queryBuilder().where(CommonBuildingAndDADao.Properties.Name.eq(result.getDeviceName())).list();                        if (list.size() == 0) {                            CommonBuildingAndDA bda = new CommonBuildingAndDA(null, result.getDeviceName(), null);                            dao.insert(bda);                        }                        Bundle bundle = new Bundle();                        bundle.putParcelable(REQUEST_RESULT, result);                        if (action != null) {                            gotoActivitySetResult(bundle, REQUEST_CODE);                        } else {                            gotoActivity(OperationActivity.class, bundle, true);                        }                    }                    @Override                    public void onItemLongClick(View view, int position) {                        if (queryType == 1) return;                        DeviceResult result = mAdapter.getItem(position);                        MaterialDialog dialog = new MaterialDialog(mContext);                        dialog.setTitle(R.string.change_user);                        dialog.btnNum(2)                                .content(getString(R.string.confirm_delete_da_or_building))                                .btnText(getString(R.string.bt_cancel), getString(R.string.bt_sure))                                .showAnim(mBasIn)                                .dismissAnim(mBasOut)                                .show();                        dialog.setOnBtnClickL(dialog::dismiss, () -> {                            dialog.dismiss();                            List<CommonBuildingAndDA> list = dao.queryBuilder().where(CommonBuildingAndDADao.Properties.Name.eq(result.getDeviceName())).list();                            if (list.size() > 0) {                                mAdapter.removeItem(position);                                dao.delete(list.get(0));                            }                        });                    }                }));        manager = new StaggeredGridLayoutManager(3, StaggeredGridLayoutManager.VERTICAL);        recyclerView.setLayoutManager(manager);        mAdapter = new CommonRecyclerViewAdapter<DeviceResult>(mContext, R.layout.item_device_search_list) {            @Override            public void convert(BaseRecyclerViewHolder helper, DeviceResult item, int position) {                TextView tv = helper.getView(R.id.tv_device_name);                tv.setText(item.getDeviceName());                // 随机高度, 模拟瀑布效果.                ViewGroup.LayoutParams lp = tv.getLayoutParams();                lp.height = DensityUtils.dp2px(BuildingAndDaActivity.this, (int) (50 + Math.random() * 50));                tv.setLayoutParams(lp);            }        };        ScaleInAnimationAdapter alphaAdapter = new ScaleInAnimationAdapter(mAdapter);        alphaAdapter.setInterpolator(new OvershootInterpolator(0.5f));        alphaAdapter.setDuration(1000);        alphaAdapter.setFirstOnly(false);        RecyclerAdapterWithHF adapter = new RecyclerAdapterWithHF(alphaAdapter);        recyclerView.setAdapter(adapter);    }    private void initLoadingView() {        loadingView.showContent();        loadingView.setRetryListener(v -> setData());    }    @Override    protected void initData() {        items = new ArrayList<>();        queryData();    }    //查询常用的楼宇或台区    private void queryData() {        queryType = 0;        List<CommonBuildingAndDA> list = dao.queryBuilder().orderDesc(CommonBuildingAndDADao.Properties.Id).list();        for (CommonBuildingAndDA da : list) items.add(new DeviceResult(da.getName()));        mAdapter.fillList(items);    }    private void setData() {        searchText = etSearchContent.getText().toString();        if (TextUtils.isEmpty(searchText)) {            return;        }        if (!Tools.isNetworkAvailable()) {            mAdapter.clearAll();            loadingView.setErrorText(getString(R.string.network_not_available));            loadingView.showError();            return;        }        loadingView.showLoading();        handler.postDelayed(() -> {            loadingView.showContent();            items.clear();            queryType = 1;            for (int i = 0; i < 40; i++) {                items.add(new DeviceResult(searchText + (i + 1)));            }            mAdapter.fillList(items);        }, 2000);    }    //滚动到顶部    private void scrollToTop() {        hideFABTop();        manager.scrollToPosition(0);    }    //隐藏按钮    private void hideFABTop() {        AnimationUtil.scaleHide(fabGoTop, new ViewPropertyAnimatorListener() {            @Override            public void onAnimationStart(View view) {            }            @Override            public void onAnimationEnd(View view) {                fabGoTop.setVisibility(View.GONE);            }            @Override            public void onAnimationCancel(View view) {            }        });    }    @OnClick({R.id.fab_go_top, R.id.et_search_content})    public void onClick(View view) {        switch (view.getId()) {            case R.id.fab_go_top:                scrollToTop();                break;            case R.id.et_search_content:                SearchActivity.runSearchActivityForResult(BuildingAndDaActivity.this, etSearchContent.getText().toString());                break;        }    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == SearchActivity.SEARCH_CODE && data != null) {            String content = data.getStringExtra(SearchActivity.SEARCH_CONTENT);            if (!TextUtils.isEmpty(content)) {                etSearchContent.setText(content);                setData();            }        } else if (requestCode == SpeechActivity.REQUEST_CODE && data != null) {            String content = data.getStringExtra(SpeechActivity.REQUEST_RESULT);            if (!TextUtils.isEmpty(content)) {                etSearchContent.setText(content);                setData();            }        }    }    @OnClick(R.id.ibt_speech_search)    public void onClick() {        SpeechActivity.runSpeechActivityForResult(BuildingAndDaActivity.this, false);    }}