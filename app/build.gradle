apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'org.greenrobot.greendao'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId "com.handu.poweroperational"
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "mips", "mips64", "x86", "x86_64"
        }
        //参数说明
        manifestPlaceholders = [
                GETUI_APP_ID    : GETUI_APP_ID,
                GETUI_APP_KEY   : GETUI_APP_KEY,
                GETUI_APP_SECRET: GETUI_APP_SECRET,
                PACKAGE_NAME    : applicationId
        ]
        buildConfigField "String", "MESSAGE", "\"I am the base apk\""
        /**
         * client version would update with patch
         * so we can get the newly git version easily!
         */
        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    //多渠道、多环境、多地区的不同配置(app名称，IP地址，等等)
    productFlavors {
        dzw {
            applicationId "com.handu.poweroperational"
            resValue "string", "app_name", "电力运维平台dzw"
            buildConfigField "String", "Ip", '"http://192.168.1.47:2062"'
        }
        zzl {
            applicationId "com.handu.poweroperational"
            resValue "string", "app_name", "电力运维平台zzl"
            buildConfigField "String", "Ip", '"http://192.168.1.12:2062"'
        }
        lkl {
            applicationId "com.handu.poweroperational"
            resValue "string", "app_name", "电力运维平台lkl"
            buildConfigField "String", "Ip", '"http://192.168.1.11:2062"'
        }
        ll {
            applicationId "com.handu.poweroperational"
            resValue "string", "app_name", "电力运维平台ll"
            buildConfigField "String", "Ip", '"http://192.168.1.35:2062"'
        }
    }
//    android.applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                File outputDirectory = new File(outputFile.parent);
//                def fileName = null
//                if (variant.buildType.name == "release") {
//                    fileName = "pop_${variant.productFlavors[0].name}_v${defaultConfig.versionName}.apk"
//                } else if (variant.buildType.name == "debug") {
//                    fileName = "pop_${variant.productFlavors[0].name}_v${defaultConfig.versionName}_debug.apk"
//                }
//                output.outputFile = new File(outputDirectory, fileName)
//            }
//            // 删除unaligned apk
//            if (output.zipAlign != null) {
//                output.zipAlign.doLast {
//                    output.zipAlign.inputFile.delete()
//                }
//            }
//        }
//    }
    //签名
    signingConfigs {
        debug {
            try {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
        release {
            try {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }
    buildTypes {
        debug {
            //是否混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            //是否混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    //这个是解决lint报错的代码
    lintOptions {
        abortOnError false
        // 防止在发布的时候出现因MissingTranslation导致Build Failed!
        disable 'MissingTranslation'
        checkReleaseBuilds false
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            jni.srcDirs = []
        }
    }
    externalNativeBuild {
        ndkBuild {
            path file("jni\\Android.mk")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
    }
}

greendao {
    schemaVersion DB_VERSION as int
    daoPackage 'com.handu.poweroperational.db.dao'
    targetGenDir 'src/main/java'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile files('libs/BaiduLBS_Android.jar')
    compile files('libs/httpmime-4.1.2.jar')
    compile files('libs/IndoorscapeAlbumPlugin.jar')
    compile files('libs/baidumapapi_search_v4_2_0.jar')
    compile('com.android.support:design:' + TARGET_SDK_VERSION + '+')
    compile('com.android.support:support-v4:' + TARGET_SDK_VERSION + '+')
    compile('com.android.support:cardview-v7:' + TARGET_SDK_VERSION + '+')
    compile('com.android.support:appcompat-v7:' + TARGET_SDK_VERSION + '+')
    compile('com.android.support:recyclerview-v7:' + TARGET_SDK_VERSION + '+')
    //可选，用于生成application类
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    //tinker的核心库
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    compile "com.android.support:multidex:1.0.1"
    compile('com.lzy.net:okhttputils:+')
    compile('com.lzy.net:okhttpserver:+')
    compile('com.github.bmelnychuk:atv:1.2.+')
    compile('com.github.PhilJay:MPAndroidChart:v2+')
    compile('com.getui:sdk:+')
    compile 'jp.wasabeef:recyclerview-animators:2.2.3'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.google.code.gson:gson:2.5'
    compile 'com.lzy.widget:imagepicker:0.3.2'
    compile 'com.lzy.widget:ninegridview:0.2.0'
    compile 'com.lzy.widget:view-core:0.2.1'
    compile 'com.github.johnkil.print:print:1.2.2'
    compile 'com.bigkoo:alertview:1.0.2'
    compile 'com.flyco.dialog:FlycoDialog_Lib:1.3.2@aar'
    compile 'com.ashokvarma.android:bottom-navigation-bar:1.3.0'
    compile 'com.chanven.lib:cptr:1.1.0'
    compile 'com.andkulikov:transitionseverywhere:1.6.9'
    compile 'com.yanzhenjie:permission:1.0.3'
    compile 'com.jaredrummler:material-spinner:1.1.0'
    compile 'com.google.zxing:core:3.2.1'
    compile 'cn.bingoogolapple:bga-qrcodecore:1.1.5@aar'
    compile 'cn.bingoogolapple:bga-zxing:1.1.5@aar'
    compile 'com.flipboard:bottomsheet-core:1.5.1'
    compile 'com.roughike:swipe-selector:1.0.6'
    compile 'com.haozhang.libary:android-slanted-textview:1.2'
    compile 'com.github.JayFang1993:DropDownMenu:v0.9'
    compile 'com.github.czy1121:loadinglayout:1.0.1'
    compile 'com.github.ybq:Android-SpinKit:1.1.0'
    compile 'com.github.GrenderG:Toasty:1.1.3'
    compile 'org.greenrobot:greendao:3.2.0'
    testCompile 'junit:junit:4.12'
    compile files('libs/Msc.jar')
    compile files('libs/Sunflower.jar')
}

def gitSha() {
    return "${VERSION_NAME}"
}

def bakPath = file("baseApk/${VERSION_NAME}/")

/**
 * you can use assembleRelease to build you base apk
 * use tinkerPatchRelease -POLD_APK=  -PAPPLY_MAPPING=  -PAPPLY_RESOURCE= to build patch
 * add apk from the build/bakApk
 */
ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    //for normal build
    //old apk file to build patch apk
    //旧版本apk路径配置
    tinkerOldApkPath = "${bakPath}/"
    //resource R.txt to build patch apk, must input if there is resource changed
    //旧版本apk R文件
    tinkerApplyResourcePath = "${bakPath}/"
    //proguard mapping file to build patch apk
    //用于混淆，没有混淆可以不管
    tinkerApplyMappingPath = "${bakPath}/"
    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'
    tinkerPatch {
        /**
         * 基准apk包路径，也就是旧包路径
         * */
        oldApk = getOldApkPath()
        /**
         * 如果出现以下的情况，并且ignoreWarning为false，我们将中断编译。因为这些情况可能会导致编译出来的patch包
         * 带来风险：
         * 1. minSdkVersion小于14，但是dexMode的值为"raw";
         * 2. 新编译的安装包出现新增的四大组件(Activity, BroadcastReceiver...)；
         * 3. 定义在dex.loader用于加载补丁的类不在main dex中;
         * 4. 定义在dex.loader用于加载补丁的类出现修改；
         * 5. resources.arsc改变，但没有使用applyResourceMapping编译。
         * */
        ignoreWarning = false
        /**
         * 在运行过程中，我们需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名
         * */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * Warning, applyMapping will affect the normal android build!
         */
        buildConfig {
            /**
             * optional，default 'null'
             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
             * apk mapping file if minifyEnabled is enable!
             * Warning:
             * you must be careful that it will affect the normal assemble build!
             */
            applyMapping = getApplyMappingPath()
            /**
             * optional，default 'null'
             * It is nice to keep the resource id from R.txt file to reduce java changes
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * necessary，default 'null'
             * because we don't want to check the base apk with md5 in the runtime(it is slow)
             * tinkerId is use to identify the unique base apk when the patch is tried to apply.
             * we can use git rev, svn rev or simply versionCode.
             * we will gen the tinkerId in your manifest automatic
             */
            tinkerId = getTinkerIdValue()

            /**
             * if keepDexApply is true, class in which dex refer to the old apk.
             * open this can reduce the dex diff file size.
             */
            keepDexApply = false
        }

        dex {
            /**
             * 只能是'raw'或者'jar'。
             * 对于'raw'模式，我们将会保持输入dex的格式。
             * 对于'jar'模式，我们将会把输入dex重新压缩封装到jar。如果你的minSdkVersion小于14，你必须选择‘jar’模式
             * ，而且它更省存储空间，但是验证md5时比'raw'模式耗时()
             * */
            dexMode = "jar"

            /**
             * 是否提前生成dex，而非合成的方式。这套方案即回退成Qzone的方案，对于需要使用加固或者多flavor打包(建
             * 议使用其他方式生成渠道包)的用户可使用。但是这套方案需要插桩，会造成Dalvik下性能损耗以及Art补丁包可
             * 能过大的问题，务必谨慎使用。另外一方面，这种方案在Android N之后可能会产生问题，建议过滤N之后的用户。
             */
//            usePreGeneratedPatchDex = false
            /**
             * 需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             *     这一项非常重要，它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。
             这里需要定义的类有：
             1. 你自己定义的Application类；
             2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；
             3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；
             4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，这些类的直接引用类也
             需要加入到loader中。或者你需要将这个类变成非preverify。
             */
            loader = [
                    "com.tencent.tinker.loader.*",
                    "com.tencent.tinker.*",
                    "com.handu.poweroperational.main.application.PowerOperationalApplication"
            ]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            /**
             * 需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...
             */
            pattern = ["lib/*/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            /**
             * 对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。这可以降低补丁包的大小，但是会增加合成
             * 时的复杂度。默认大小为100kb
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the PopPatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")
            /**
             * patch version via packageConfig
             */
            configField("patchVersion", PATCH_VERSION)
        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         */
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             */
//        path = "/usr/local/bin/7za"
        }
    }
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each {
        flavor ->
            flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->

        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"
                        newFileNamePrefix = "${newFileNamePrefix}-${VERSION_NAME}"
                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-${VERSION_NAME}.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-${VERSION_NAME}-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-${VERSION_NAME}-R.txt"

                    }
                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-${VERSION_NAME}.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-${VERSION_NAME}-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-${VERSION_NAME}-R.txt"
                    }

                }
            }
        }
    }
}
